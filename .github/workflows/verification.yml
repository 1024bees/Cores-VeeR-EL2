name: VeeR-EL2 verification

on:
  workflow_call:

env:
  VERILATOR_VERSION: v5.010
  MOCK_VERIFICATION_RUN: false

jobs:
  tests:
    name: Run test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test: ["test_pyuvm"]
        # test: ["test_pyuvm", "test_cocotb","test_dev"]
    env:
      CCACHE_DIR: "/opt/verilator_cache/.cache/"
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - name: Setup repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Cache Metadata
        id: cache_metadata
        run: |
          cache_restore_name=cache_verilator_${{ env.VERILATOR_VERSION }}
          cache_date=$(date +"%Y_%m_%d")
          cache_name=${cache_restore_name}_${cache_date}

          cache_verification_name=cache_verification_${{ matrix.test }}

          echo "Cache restore name: "${cache_restore_name}
          echo "Cache date: "${cache_date}
          echo "Cache name: "${cache_name}
          echo "Cache verification name: "${cache_verification_name}

          echo "cache_restore_name=${cache_restore_name}" >> "$GITHUB_ENV"
          echo "cache_date=${cache_date}" >> "$GITHUB_ENV"
          echo "cache_name=${cache_name}" >> "$GITHUB_ENV"
          echo "cache_verification_name=${cache_verification_name}" >> "$GITHUB_ENV"

      - name: Restore verilator cache
        id: cache-verilator-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            /opt/verilator
            ${{ env.CCACHE_DIR }}
          key: ${{ env.cache_name }}
          restore-keys: ${{ env.cache_restore_name }}

      - name: Setup verification test cache
        uses: actions/cache@v3
        id: cache-verification-setup
        with:
          path: |
            /opt/verilator
            ${{ env.CCACHE_DIR }}
          key: ${{ env.cache_verification_name }}

      - name: Install prerequisities
        run: |
          sudo apt -qqy update && sudo apt -qqy --no-install-recommends install \
            autoconf automake autotools-dev \
            bc bison build-essential \
            ccache cpanminus curl \
            flex \
            gawk gcc-riscv64-unknown-elf git gperf \
            help2man \
            libexpat-dev libfl-dev libfl2 libgmp-dev \
            libmpc-dev libmpfr-dev libpython3-all-dev libtool \
            ninja-build \
            patchutils python3 python3-dev python3-pip \
            texinfo \
            zlib1g zlib1g-dev
          sudo cpanm Bit::Vector

      # If PR is merged, can change to main branch
      # https://github.com/cocotb/cocotb/pull/3316
      - name: Get patched cocotb
        uses: actions/checkout@v3
        with:
          repository: antmicro/cocotb
          path: third_party/cocotb
          ref: mczyz/verilator-patch-timing

      - name: Run ${{ matrix.test }}
        if: ${{ env.MOCK_VERIFICATION_RUN == 'false' }}
        run: |
          export PATH=/opt/verilator/bin:$PATH
          export RV_ROOT=`pwd`
          export PYTHONUNBUFFERED=1
          pip3 install meson
          pip3 install -r $RV_ROOT/verification/requirements.txt
          pushd $RV_ROOT/verification/${{ matrix.test }}
            python -m pytest ${{ matrix.test }}.py -sv --html=${{ matrix.test }}.html --md=$GITHUB_STEP_SUMMARY
            mkdir -p webpage_${{ matrix.test }}
            mv ${{ github.workspace }}/verification/${{ matrix.test }}/${{ matrix.test }}.html webpage_${{ matrix.test }}
            mv ${{ github.workspace }}/verification/${{ matrix.test }}/assets webpage_${{ matrix.test }}
            mv webpage_${{matrix.test}} ${{ github.workspace }}/

            # TODO: fix once coverage is implemented
            # mkdir -p coverage_${{ matrix.test }}
            # mkdir -p ${{ github.workspace }}/results_${{ matrix.test }}
            # mv coverage_${{matrix.test}} ${{ github.workspace }}/
            # ./github/scripts/convert_coverage_data.sh all ${{ github.workspace }}/coverage ${{ github.workspace }}/results_${{ matrix.test }} coverage_${{ matrix.test }}

          popd

      - name: Run mock ${{ matrix.test }}
        if: ${{ env.MOCK_VERIFICATION_RUN == 'true' }}
        run: |
          export PYTHONUNBUFFERED=1
          export RV_ROOT=`pwd`
          pip3 install -r $RV_ROOT/verification/requirements.txt
          pushd $RV_ROOT/verification/test_debug
            python -m pytest test_debug.py -v --html=${{ matrix.test }}.html --md=$GITHUB_STEP_SUMMARY
            mkdir -p webpage_${{ matrix.test }}
            mv ${{ github.workspace }}/verification/test_debug/${{ matrix.test }}.html webpage_${{ matrix.test }}
            mv ${{ github.workspace }}/verification/test_debug/assets webpage_${{ matrix.test }}
            mv webpage_${{matrix.test}} ${{ github.workspace }}/
          popd

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: |
            webpage_*

      # TODO: fix once coverage is implemented
      # - name: Upload coverage artifacts
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: verification_tests_coverage_data
      #     path: |
      #       ./results/*.info